/** This webppl script initialises the game for a given participant
 * Answers to questionnaire questions are passed in globalStore object
 * and allow us to estimate parameters of the participant.
 *
 * The script produces an object that contains a 'starter kit' for a
 * play of Trust Game, consisting of
 * - game setup, an object {
 *    disclosed, // whether horizon is disclosed or not
 *    role, // what role does the participant take (investor/investee)
 *    prior // informed or not
 *  }
 *  - initial belief of the robot, which may be based on questionnaire
 *  answers (informed prior) or not (uninformed)
 *  - parameters of the robot (goal coeffs, rationality, discount, lookahead)
 * */

// let LOOKAHEAD_LIMIT = 4

/**
 *
 * @param answers
 * @param informed
 * @param role of the participant
 * @param limit
 * @returns
 */
let estimateLookahead = function(answers, informed, role, limit) {
  // answers are numbers for horizon and money request questions
  let priorByLimit = [
    {vs: [0]},
    {ps: [1/3, 2/3], cs: [0,1]},
    {ps: [1/8, 2/8, 5/8], cs: [0,1,2]},
    {ps: [1/13,2/13,5/13,5/13], vs: [0,1,2,3]},
    {ps: [1/14,2/14,5/14,5/14,1/14], vs: [0,1,2,3,4]}
  ]
  let prior = priorByLimit[Math.min(4, limit)]
  let estimated = 20 - answers.moneyRequest
  let simplify = role === 'investor'
  return informed ? { prior, estimated, simplify } : { prior, simplify }
}

// let estimateLookahead = function(answers, informed) {
//   // answers are numbers for horizon and money request questions
//   let prior = LOOKAHEAD_LIMIT === 4 ?
//     Categorical({ps: [1/14,2/14,5/14,5/14,1/14], vs: [0,1,2,3,4]}) :
//     Categorical({ps: [1/13,2/13,5/13,5/13], vs: [0,1,2,3]})
//   let estimated = 20 - answers.moneyRequest
//   let posterior = Infer({method: 'enumerate'}, function() {
//     let s = sample(prior)
//     factor(-Math.abs(s - estimated))
//     return s
//   })
//   return informed ? posterior : prior
// }

// based on answers to lottery questions, estimate rationality
// (in particular, its mean and dev as it's assumed to be normal)
// by starting form 16 and going up/down depending on
// correct/incorrect answer
/**
 *
 * @param answers
 * @param informed
 * @param role of the participant
 * @returns [Float] array of possible values (assumed equally likely)
 */
let estimateRationality = function(answers, informed, role) {
  let baseRationality = 16
  let baseDev = 8
  let correctPreferences = [0,2,1]
  let actualPreferences = [answers.lottery1, answers.lottery2, answers.lottery3]
  let equals = function(x,y) { return _.isEqual(x,y)}
  let correctness = map2(equals, correctPreferences, actualPreferences)
  let computedRat = reduce(function(x, acc) {
    let prevRationality = acc[0]
    let factor = acc[1]
    let nextRationality = x ? prevRationality + factor : max(prevRationality - factor, 0)
    return [nextRationality, factor / 2]
  }, [baseRationality,baseRationality], correctness)
  let computedDev = groupBy(equals, correctness).length === 1 ?
    4 : 8
  let expectedRationality = informed ? computedRat[0] : 2 * baseRationality
  let dev = informed ? computedDev : baseDev
  let samples = role === 'investor' ? 1 : 3
  return getNormalSamples(expectedRationality, dev, samples)
  // return { expectedRationality, dev }
}

let getNormalSamples = function(mean, dev, samples) {
  let generate = function() {
    let s = gaussian({mu: mean, sigma: dev})
    if (s > 0) return s
    return generate()
  }
  if (samples === 1) return [mean]
  return repeat(samples, generate)
  // return Infer({method: 'forward', samples: samples, model: function() {
  //     return generate()
  //   }});
}

let estimateTrust = function(answers, informed) {
  return informed ? -0.1 + 0.2 * answers.trust : 0.5
}

// this function generates bot's belief
let estimateGoalCoeffs = function(answers, informed) {
  // answers contains a 1-5 self attribution of altruism
  // towards robots
  // 1 - don't care about what robot thinks about me,
  // 5 - care very much
  let altruism = answers.altruism
  // let altruismNormalised = (altruism - 1) / 4
  // goal coeffs format [ money, trust]
  return informed ? [2.25 - altruism * 0.25, 0.75 + 0.25 * altruism] : [1,1]
}

let generateCondition = function() {
  // mult factor either 2 or 3
  let horizonDisclosed = flip()
  let role = flip() ? 'investor' : 'investee'
  let prior = flip()
  // let prior = false
  let botCoeffs = categorical({vs: [0,1,2]})
  return {
    horizonDisclosed, role, prior, botCoeffs
  }
}

/** @param role of the participant */
let generateRobotParams = function(globalStore, coeffs, role) {
  let lookAheadLimit = globalStore.params.lookAhead
  // when bot is an investor lookahead of 2 is sufficient
  // otherwise should be as high as it gets
  let lookAhead = role === 'investee' ? 2 : lookAheadLimit
  // resp. selfless, neutral, greedy
  let goalCoeffs = [[.3,.7],[.5,.5],[.8,.2]][coeffs]
  return {
    goalCoeffs,
    metaParams: {
      alpha: 1000,
      discountFactor: 0.8,
      lookAhead: lookAhead
    },
    usesHeuristics: true
  }
}

/** returns a serialisable representation of bot's state
 * role is role of the participant */
let generateInitialState = function(globalStore, informed, role) {
  let answers = globalStore.answers
  let params = globalStore.params
  let belief = estimateGoalCoeffs(answers, informed)
  let trust = estimateTrust(answers, informed)
  let isInvestee = role === 'investor'
  let alpha = estimateRationality(answers, informed, role)
  let lookAhead = estimateLookahead(answers, informed, role, params.lookAhead)
  let discountFactor = 0.8
  return {
    isInvestee, /** bool */
    belief, /** array, eg [2,1] */
    trust, /** value, eg, 0.3 */
    metaParamsEstimations: {
      alpha, /** array of values */
      lookAhead, /** {prior, estimated, simplify} */
      discountFactor /** value */
    }
  }
}

let condition = generateCondition()
let initialState = generateInitialState(globalStore, condition.prior, condition.role)
let params = generateRobotParams(globalStore, condition.botCoeffs, condition.role)

let result = {
  condition, initialState, params
}

result


